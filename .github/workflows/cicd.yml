name: HAOT CI/CD Pipeline

on:
  push:
    branches: [ "deploy" ]  # deploy 브랜치에 push 시 트리거

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [server, gateway, auth, coupon, lodge, payment, point, reservation, review, user]

    steps:
      # 코드 체크아웃
      - name: Check out the repository and update submodules
        uses: actions/checkout@v3
        with:
          submodules: true  # 이 옵션은 submodule을 자동으로 가져옵니다.

      # Build를 위한 JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Application 의 Data source 설정
      - name: Set environment variables for all services
        env:
          DATABASE_URL: ${{ secrets.DB_URL}}
          DATABASE_USERNAME: ${{ secrets.DB_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SERVER_DNS: ${{ secrets.SERVER_DNS }}
          USER_SERVICE_DNS: ${{ secrets.USER_SERVICE_DNS }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          USER_SERVICE_HOST: ${{ secrets.USER_SERVICE_HOST }}
          AUTH_SERVICE_HOST: ${{ secrets.AUTH_SERVICE_HOST }}
          GATEWAY_SERVICE_HOST: ${{ secrets.GATEWAY_SERVICE_HOST }}
          COUPON_SERVICE_HOST: ${{ secrets.COUPON_SERVICE_HOST }}
          LODGE_SERVICE_HOST: ${{ secrets.LODGE_SERVICE_HOST }}
          PAYMENT_SERVICE_HOST: ${{ secrets.PAYMENT_SERVICE_HOST }}
          POINT_SERVICE_HOST: ${{ secrets.POINT_SERVICE_HOST }}
          RESERVATION_SERVICE_HOST: ${{ secrets.RESERVATION_SERVICE_HOST }}
          REVIEW_SERVICE_HOST: ${{ secrets.REVIEW_SERVICE_HOST }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PORT_ONE: ${{ secrets.PORT_ONE }}
          LOKI_PUSH_URL: ${{ secrets.LOKI_PUSH_URL }}

        run: |
          # Update application.yml for each service
          sed -i "s#\${DATABASE_URL}#${DATABASE_URL}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${DATABASE_USERNAME}#${DATABASE_USERNAME}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${DATABASE_PASSWORD}#${DATABASE_PASSWORD}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${REDIS_URL}#${REDIS_URL}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${REDIS_PASSWORD}#${REDIS_PASSWORD}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${SERVER_DNS}#${SERVER_DNS}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${USER_SERVICE_DNS}#${USER_SERVICE_DNS}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${SERVER_HOST}#${SERVER_HOST}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${USER_SERVICE_HOST}#${USER_SERVICE_HOST}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${AUTH_SERVICE_HOST}#${AUTH_SERVICE_HOST}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${GATEWAY_SERVICE_HOST}#${GATEWAY_SERVICE_HOST}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s#\${JWT_SECRET}#${JWT_SECRET}#g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s@\${PORT_ONE}@${PORT_ONE}@g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s@\${COUPON_SERVICE_HOST}@${COUPON_SERVICE_HOST}@g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s@\${LODGE_SERVICE_HOST}@${LODGE_SERVICE_HOST}@g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s@\${PAYMENT_SERVICE_HOST}@${PAYMENT_SERVICE_HOST}@g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s@\${POINT_SERVICE_HOST}@${POINT_SERVICE_HOST}@g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s@\${RESERVATION_SERVICE_HOST}@${RESERVATION_SERVICE_HOST}@g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          sed -i "s@\${REVIEW_SERVICE_HOST}@${REVIEW_SERVICE_HOST}@g" ${{ matrix.service }}/src/main/resources/application-prod.yml
          if [[ "${{ matrix.service }}" != "server" ]]; then
            echo "Updating logback.xml for ${{ matrix.service }} with Loki URL: ${LOKI_PUSH_URL}"
            sed -i "s@\${LOKI_PUSH_URL}@${LOKI_PUSH_URL}@g" ${{ matrix.service }}/src/main/resources/logback.xml
          else
            echo "Skipping logback.xml update for 'server' service."
          fi
          


      # Gradle 빌드
      - name: Build with Gradle for ${{ matrix.service }}
        run: |
          cd ./${{ matrix.service }}
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew bootJar -Dspring.profiles.active=prod

      # Docker 이미지 빌드
      - name: Build Docker images for ${{ matrix.service }}
        run: |
          docker build -t haot-ecr/${{ matrix.service }} ./${{ matrix.service }}   

      # ECR에 로그인
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ECR에 이미지 Push
      - name: Push Docker images to ECR for ${{ matrix.service }}
        run: |
          docker tag haot-ecr/${{ matrix.service }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:${{ matrix.service }}-latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:${{ matrix.service }}-latest

      # ECS 서비스 강제 업데이트 (Task Definition을 변경하지 않고 서비스만 재시작)
      - name: Force restart ECS service
        run: |
          aws ecs update-service \
            --cluster haot-cluster \
            --service haot-${{ matrix.service }}-service \
            --force-new-deployment