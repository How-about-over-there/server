name: HAOT CI/CD Pipeline

on:
  push:
    branches: [ "cicd/feat" ]  # feat/cicd 브랜치에 push 시 트리거
  pull_request:
    branches: [ "cicd/feat" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [server, gateway, auth, user]

    steps:
      # 코드 체크아웃
      - name: Check out the repository and update submodules
        uses: actions/checkout@v3
        with:
          submodules: true  # 이 옵션은 submodule을 자동으로 가져옵니다.

      # Build를 위한 JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Application 의 Data source 설정
      - name: Set environment variables for all services
        env:
          DATABASE_URL: ${{ secrets.DB_URL}}
          DATABASE_USERNAME: ${{ secrets.DB_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
        run: |
          # Update application.yml for each service
          sed -i "s|\${DATABASE_URL}|${DATABASE_URL}|g" ${{ matrix.service }}/src/main/resources/application.yml
          sed -i "s|\${DATABASE_USERNAME}|${DATABASE_USERNAME}|g" ${{ matrix.service }}/src/main/resources/application.yml
          sed -i "s|\${DATABASE_PASSWORD}|${DATABASE_PASSWORD}|g" ${{ matrix.service }}/src/main/resources/application.yml
          sed -i "s|\${REDIS_URL}|${REDIS_URL}|g" ${{ matrix.service }}/src/main/resources/application.yml

      # Gradle 빌드
      - name: Build with Gradle for ${{ matrix.service }}
        run: |
          cd ./${{ matrix.service }}
          chmod +x ./gradlew
          ./gradlew bootJar

      # Docker 이미지 빌드
      - name: Build Docker images for ${{ matrix.service }}
        run: |
          docker build -t haot-ecr/${{ matrix.service }} ./${{ matrix.service }}   

      # ECR에 로그인
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ECR에 이미지 Push
      - name: Push Docker images to ECR for ${{ matrix.service }}
        run: |
          docker tag haot-ecr/${{ matrix.service }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:${{ matrix.service }}-latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:${{ matrix.service }}-latest

      - name: Retrieve most recent ECS task definition JSON file
        id: retrieve-task-def
        run: |
          aws ecs describe-task-definition --task-definition haot-${{ matrix.service }}-task --query taskDefinition > task-definition.json
          cat task-definition.json
          echo "::set-output name=task-def-file::task-definition.json"


      # ECS 서비스 업데이트
      - name: Deploy ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: haot-${{ matrix.service }}-service
          cluster: haot-cluster
          wait-for-service-stability: true
