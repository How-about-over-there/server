name: HAOT CI/CD Pipeline

on:
  push:
    branches: [ "nouse" ]  # feat/cicd 브랜치에 push 시 트리거
  pull_request:
    branches: [ "nouse" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [server, gateway, auth, coupon, lodge, payment, point, reservation, review, user]

    steps:
      # 코드 체크아웃
      - name: Check out the repository and update submodules
        uses: actions/checkout@v3
        with:
          submodules: true  # 이 옵션은 submodule을 자동으로 가져옵니다.

      # Build를 위한 JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Application 의 Data source 설정
      - name: Set environment variables for all services
        env:
          DATABASE_URL: ${{ secrets.DB_URL}}
          DATABASE_USERNAME: ${{ secrets.DB_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Update application.yml for each service
          sed -i "s|\${DATABASE_URL}|${DATABASE_URL}|g" ${{ matrix.service }}/src/main/resources/application.yml
          sed -i "s|\${DATABASE_USERNAME}|${DATABASE_USERNAME}|g" ${{ matrix.service }}/src/main/resources/application.yml
          sed -i "s|\${DATABASE_PASSWORD}|${DATABASE_PASSWORD}|g" ${{ matrix.service }}/src/main/resources/application.yml

      # Gradle 빌드
      - name: Build with Gradle for ${{ matrix.service }}
        run: |
          cd ./${{ matrix.service }}
          chmod +x ./gradlew
          ./gradlew bootJar

      # Docker 이미지 빌드
      - name: Build Docker images for ${{ matrix.service }}
        run: |
          docker build -t haot-ecr/${{ matrix.service }} ./${{ matrix.service }}   

      # ECR에 로그인
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ECR에 이미지 Push
      - name: Push Docker images to ECR for ${{ matrix.service }}
        run: |
          docker tag haot-ecr/${{ matrix.service }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:${{ matrix.service }}-latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:${{ matrix.service }}-latest
      # Application 의 Data source 설정
      - name: Set environment variables for all services
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Update application.yml for each service
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
          sed -i "s|\${AWS_ACCOUNT_ID}|${AWS_ACCOUNT_ID}|g" docker-compose.yml
          sed -i "s|\${AWS_DEFAULT_REGION}|${AWS_DEFAULT_REGION}|g" docker-compose.yml
      # Set up SSH key
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      # Copy docker-compose.yml to EC2
      - name: Copy docker-compose.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/docker/compose

      # EC2 SSH로 연결하여 Docker Compose 실행
      - name: SSH to EC2 and deploy with Docker Compose
        uses : appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            # 도커 이미지 폴더로 이동
            cd /docker/compose
            # 실행중인 컨테이너 중지 및 삭제
            docker-compose down
            # ECR 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
            
            # EC2에서 Docker 이미지 pull
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:server-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:gateway-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:user-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:auth-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:coupon-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:lodge-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:payment-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:point-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:reservation-latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/haot-ecr:review-latest
            
            # Docker Compose로 서비스 실행
            cd /docker/compose
            docker-compose up -d
