plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.7'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.haot'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.4")
	set('mapstructVersion', "1.6.0")
	set('querydslVersion', "5.0.0")  // QueryDSL 버전 명시적으로 설정
}

dependencies {
	// mapstruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	testImplementation "org.testng:testng:6.10", "org.easytesting:fest-assert:1.4"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	// Jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// 나중에 버전 바꾸기
	implementation 'com.google.guava:guava:33.3.1-jre'

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// prometheus
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// PostgreSql
	runtimeOnly 'org.postgresql:postgresql'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//Spring AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// kafka
	implementation 'org.springframework.kafka:spring-kafka'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	// lombok test 의존성
	testCompileOnly 'org.projectlombok:lombok:1.18.30' // 테스트 의존성 추가
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30' // 테스트 의존성 추가
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs = options.compilerArgs + [
			'-Amapstruct.suppressGeneratorTimestamp=true',
			'-parameters'
	]
}

tasks.named('test') {
	useJUnitPlatform()
}

