version: '3.7'

services:
  eureka-service:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: eureka-service
    ports:
      - "19090:19090"
    networks:
      - msa-network

  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "19091:19091"
    depends_on:
      - eureka-service
    networks:
      - msa-network
  auth-service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "19092:19092"
    depends_on:
      - eureka-service
      - gateway-service
    networks:
      - msa-network
#  #user
  user-service:
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "19094:19094"
    depends_on:
      - eureka-service
      - gateway-service
    networks:
      - msa-network
  #coupons
  coupon-service:
    build:
      context: ./coupon
      dockerfile: Dockerfile
    container_name: coupon-service
    ports:
      - "19096:19096"
    depends_on:
      - kafka
      - redis
      - eureka-service
     # - gateway-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/how_about_over_there
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_ZIPKIN_BASE_URL=http://haot-zipkin:9411
      - SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0
    networks:
      - msa-network

  #lodge
  lodge-service:
    build:
      context: ./lodge
      dockerfile: Dockerfile
    container_name: lodge-service
    ports:
      - "19098:19098"
    depends_on:
      - eureka-service
      - gateway-service
    networks:
      - msa-network
  #payment
  payment-service:
    build:
      context: ./payment
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "19102:19102"
    depends_on:
      - eureka-service
      - gateway-service
    networks:
      - msa-network
  #point
  point-service:
    build:
      context: ./point
      dockerfile: Dockerfile
    container_name: point-service
    ports:
      - "19104:19104"
    depends_on:
      - eureka-service
      - gateway-service
    networks:
      - msa-network
#  #reservation
  reservation-service:
    build:
      context: ./reservation
      dockerfile: Dockerfile
    container_name: reservation-service
    ports:
      - "19100:19100"
    depends_on:
      - eureka-service
      - gateway-service
    networks:
      - msa-network
#  #review
  review-service:
    build:
      context: ./review
      dockerfile: Dockerfile
    container_name: review-service
    ports:
      - "19106:19106"
    depends_on:
      - eureka-service
      - gateway-service
    networks:
      - msa-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: haot-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    networks:
      - msa-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: haot-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "39092:39092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:39092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9999
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 1m
      retries: 3
      timeout: 10s
      start_period: 40s
    networks:
      - msa-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: haot-kafka-ui
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - msa-network

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: haot-kafka-exporter
    depends_on:
      kafka :
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "kafka", "9092"]
      interval: 1m10s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "9308:9308"
    command:
      - "--kafka.server=kafka:9092"
    networks:
      - msa-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - msa-network

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: haot-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - msa-network

networks:
  msa-network:
    driver: bridge